设计模式，其实就是各种多态的灵活运用，不同的语义上取了不同的名字
*****形容词用接口，名词用抽象类*****

四人帮那本书分的类：(最好看到名字：1、要能想到典型用法，2、要能想起类图（类图还没整理保存）)
创建型模式：            结构型模式              行为型模式
1.Abstract Factory      1.Adapter               1.Chain of Reponsibility
2.Builder               2.Bridge                2.Interpreter
3.Factory Method        3.Composite             3.Iterator
4.Prototyper            4.Decorator             4.Mediator
5.Singleton             5.Facade                5.Memento
                        6.Flyweight             6.Observer
                        7.Proxy                 7.Observer
                                                8.State
                                                9.Strategy
                                                10.Template Method
                                                11.Visitor


1.单例模式Single：
工作中用Mgr01就够了，静态内部类也蛮好的，Mgr04是最完美的写法

2.策略模式Strategy：（java 的comparator）
java中的Comparator用的就是策略模式
比如一个int类型数组，排序，实现一个sort方法，参数就是这个数组，
但是，如果要排序一个double，float，或者按一个对象的属性排序，比如，猫的weight，height时，就要重新添加一个sort方法
策略模式，在排序的时候，传入对应的数组，传入要比较的策略（按照weight，还是height来排序），不改变原来的代码，
增加一个类，实现对应的接口，可扩展性就变得很好

3.工厂模式Factory：
简单工厂：
    最简单的一个工厂：比如CarFactory有一个create方法返回一个Car对象。
静态工厂：
    单例就是静态工厂，静态类
工厂方法：
    作用是可以扩展产品。
抽象工厂：
    可以扩展产品族。
spingioc：依赖注入，控制反转。（有空了看一下！）

4.外观模式Facade（消息中间件，kafka）
    比如一个人买基金，基金经理去买股票。这就相当于外观模式。具体看代码

5.装饰者模式Decorator
    可以对类的属性进行扩展。比如一杯奶茶，可以加椰果，加糖，加珍珠等等，可以无限往后加。具体看代码

6.责任链ChainOfResponsibility（Servlet的过滤器）
    比如有过滤器A,B,C，责任链可以把这三个过滤器串起来。然后可以继续添加过滤器。

7.观察者模式Observer
    当一个孩子醒了，爸，妈会有相对应的行为。爸妈就相当于观察者，孩子就是事件源。
    比如孩子在床上哭，在地上哭，在厕所哭，不用的情况，爸妈会有不同的反应，所以需要事件类。
    在观察者模式中，事件类是必不可少的。

8.组合模式Compoisite
    树形结构

9.享元模式FlyWeight
    重复利用对象

10.迭代器Iterator
    Arraylist，Linkedlist，Iterator的实现

11.代理模式Proxy


12.访问者Visitor
    在结构不变的情况下动态改变对于元素内部元素的动作
    在工作中不怎么用得到
    访问者模式，比如电脑配件，有cpu，内存，等。
    对不同的用户有不同的打折方式，比如学生，cpu打1折，内存打2折,主板打三折，对白领等其他职业打不同的折扣
    普通的想法是：在不同的配件里，根据用户的类型，做if else判断。
    但是这样，如果又加了一个用户，那每个配件里面都要修改代码，这样不好。

    所以引出访问者模式，在每个配件里，传入Visitor，调用visitor的对应方法，
    这样还有用户来的时候，就不需要修改原来的代码了。

    问：如果电脑配件增加了，那不还是要修改原来的代码么？？？
    遇到这种情况，就不适合用观察者模式了


13.构建器Builder
    就是为了构造一个对象。（构造方法）。比如构造一个地形用到几十个参数，那太多了，所以就分而治之
    又或者，构造一个对象要几十个参数，有的只要构造其中三个，有的只要构造其中五个，每个都写一个构造方法太多了

14.适配器模式Adapter
    比如手机充电器，中国的和欧洲的插座是不一样的，中国电压220V，欧洲电压110V，所以中间需要一个转接头
    中间的转接头就是适配器，能让我的手机，在其他的插座上也能充电

    下面这个io的例子，BufferedReader是一行一行读文件的，FileInputStream是按字节流读的，
    所以就需要一个转换器把字节流的，转换成一行一行的，
    InputStreamReader就相当于是转换器

15.桥接模式bridge
    比如有Gift，有WarmGift和ColdGift等等。。，这两个下面可能还有子类，子类下还有子类。。

    桥接模式：分离抽象于具体实现，让他们可以独自发展
    Gift->WarmGift ColdGift WildGift
    GiftImpl->Flower
    用聚合代替继承

16.命令模式Command
    封装各种命令，就比如ctrl+z,等命令
    可以结合责任链
    比如要发生很多的回退

17.原型模式Prototype（java自带原型模式，Object.clone）
    比如一个对象，我需要一个和他相同或者几乎相同的对象，
    就可以克隆一份出来。这就是原型模式
    包括深克隆，浅克隆，
    克隆在平常代码中，基本用不到

18.备忘录模式  Memento
    记录状态，便于回滚
    要记录的对象，要实现serializable接口，结合objectoutputstream，
    实际就是把一个对象序列化到一个文件，然后要用的时候，再返序列化回来。相当于游戏存盘
    transient关键字，用在属性前面private transient string...，表示不序列化这个

19.模板方法TempletMethod
     父类有一个模板方法是调用自己内部的几个方法，
     子类重写那几个方法后，就改变了父类的m方法。

20.状态模式State
    如果一个对象的很多行为都是根据一个状态来判断的，就可以用状态模式
    把状态抽象出来，然后不同的状态去实现这个父类
    例子：tcp的状态感知

22.Interpreter解释器
    底层会用到，平常用不到







