这包下的代码，是根据《深入理解java虚拟机》第三版 里的案例写。
会附上页数

一些参数是：
-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -X:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D://oom//HeapOOM
            堆最小   堆最大           打印gc详情                                报outofmemory，打印dump文件      dump文件路径

-Xss128k    -XX:+PrintGCDetails -verbose:gc
栈大小       在控制台输出gc详细信息  在控制台输出GC情况（这两个搭配使用）


java -XX:+PrintCommandLineFlags -version 把命令行的参数打印出来  可以看到 -XX:+UseParallelGC,用的是parallegc
返回：
-XX:InitialHeapSize=15931968 -XX:MaxHeapSize=254911488 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops
java version "1.8.0_181"
Java(TM) SE Runtime Environment (build 1.8.0_181-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)

-XX:+UseCompressedClassPointers:（压缩类型指针）64位的java虚拟机，对象内存布局中的类型指针应该是8位的，但是实际却是4为了，就是因为jvm默认开启了压缩
-XX:+UseCompressedOops：（压缩普通对象指针）比如string s = new string(),s是在对象内存布局的实例数据，指向堆中的new string，也压缩了




常用参数:
-Xmx3550m： 最大堆大小为3550m。
-Xms3550m： 设置初始堆大小为3550m。
-Xmn2g： 设置年轻代大小为2g。
-Xss128k： 每个线程的堆栈大小为128k。
-XX:MaxPermSize： 设置持久代大小为16m
-XX:NewRatio=4: 设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。
-XX:SurvivorRatio=4： 设置年轻代中Eden区与Survivor区的大小比值。设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6
-XX:MaxTenuringThreshold=0： 设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。


垃圾收集器相关参数
-XX:+UseParallelGC： 选择垃圾收集器为并行收集器。
-XX:ParallelGCThreads=20： 配置并行收集器的线程数
-XX:+UseConcMarkSweepGC： 设置年老代为并发收集。
-XX:CMSFullGCsBeforeCompaction：由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行多少次GC以后对内存空间进行压缩、整理。
-XX:+UseCMSCompactAtFullCollection： 打开对年老代的压缩。可能会影响性能，但是可以消除碎片


打印gc信息
-XX:+PrintGC 输出形式:
[GC 118250K->113543K(130112K), 0.0094143 secs] [Full GC 121376K->10414K(130112K), 0.0650971 secs]

-XX:+PrintGCDetails 输出形式:
[GC [DefNew: 8614K->781K(9088K), 0.0123035 secs] 118250K->113543K(130112K), 0.0124633 secs]
[GC [DefNew: 8614K->8614K(9088K), 0.0000665 secs][Tenured: 112761K->10414K(121024K), 0.0433488 secs] 121376K->10414K(130112K),
0.0436268 secs













