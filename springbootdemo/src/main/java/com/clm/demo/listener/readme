1.监听 Servlet 上下文对象：ApplicationListener接口
    应用场景：
    比如用户在点击某个站点的首页时，一般都会展现出首页的一些信息，而这些信息基本上或者大部分时间都保持不变，但这些信息都是来自数据库。
    如果用户的每次点击，都要从数据库中去获取数据的话，用户量少还可以接受，如果用户量非常大的话，这对数据库也是一笔很大的开销。
    针对这种首页数据，如果大部分都不常更新的话，我们完全可以把它们缓存起来，每次用户点击的时候，我们都直接从缓存中拿，
    这样既可以提高首页的访问速度，又可以降低服务器的压力。如果做得更加灵活一点，可以再加个*定时器*，定期的来更新这个首页缓存。

2.监听 HTTP 会话 Session 对象：HttpSessionListener 接口
    应用场景：
    监听 Session 对象，以获取在线用户数量

3.监听客户端请求 Servlet Request 对象：ServletRequestListener 接口
    应用场景：
    获取用户的访问信息



    补充：（未实践）
    1.ServletContextListener -- 监听servletContext对象的创建以及销毁
        1.1    contextInitialized(ServletContextEvent arg0)   -- 创建时执行
        1.2    contextDestroyed(ServletContextEvent arg0)  -- 销毁时执行
    2.HttpSessionListener  -- 监听session对象的创建以及销毁
        2.2   sessionCreated(HttpSessionEvent se)   -- 创建时执行
        2.2   sessionDestroyed(HttpSessionEvent se) -- 销毁时执行
    3.ServletRequestListener -- 监听request对象的创建以及销毁
        3.1    requestInitialized(ServletRequestEvent sre) -- 创建时执行
        3.2    requestDestroyed(ServletRequestEvent sre) -- 销毁时执行
    4.ServletContextAttributeListener  -- 监听servletContext对象中属性的改变
        4.1    attributeAdded(ServletContextAttributeEvent event) -- 添加属性时执行
        4.2    attributeReplaced(ServletContextAttributeEvent event) -- 修改属性时执行
        4.3    attributeRemoved(ServletContextAttributeEvent event) -- 删除属性时执行
    5.HttpSessionAttributeListener  --监听session对象中属性的改变
        5.1    attributeAdded(HttpSessionBindingEvent event) -- 添加属性时执行
        5.2    attributeReplaced(HttpSessionBindingEvent event) -- 修改属性时执行
        5.3    attributeRemoved(HttpSessionBindingEvent event) -- 删除属性时执行
    6.ServletRequestAttributeListener  --监听request对象中属性的改变
        6.1    attributeAdded(ServletRequestAttributeEvent srae) -- 添加属性时执行
        6.2    attributeReplaced(ServletRequestAttributeEvent srae) -- 修改属性时执行
        6.3    attributeRemoved(ServletRequestAttributeEvent srae) -- 删除属性时执行
