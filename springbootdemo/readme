1.静态变量，静态块，引用yml文件里的值（SpringContextUtil，StaticEntity，StaticUtil）

2.配置多个数据源：yml文件下的spring.datasource配置多个；com.mashibing.demo.config包下的3个类

3.用户登录设置token，用拦截器实现。com.mashibing.demo.lanjieqi.AuthenticationInterceptor,和com.mashibing.demo.WebMvcConfig

4.swagger配置，添加SwaggerConfig配置类，SpringbootdemoApplication加上@EnableSwagger2注解，controller里的方法上加
@ApiOperation（接口描述信息）@ApiImplicitParams（接口接收的参数描述）两个注解

5.mashibing AOP面向切面的例子，com.mashibing.demo.lanjieqi.LogInterceptor

6.监听一个文件，或者，监听一个文件夹下的所有文件的变化，com.mashibing.demo.filelistener，使用了commons-io这个依赖

7.自定义异常，com.mashibing.demo.CommonException，不知道什么时候写的，还没验证过

8.springboot 监听器，com.mashibing.demo.listener      执行顺序：过滤器>监听器>拦截器

9.springboot 定时任务，com.mashibing.demo.listener.ScheduleTask，这是普通定时器，可以用@EnableAsync开启多线程
                       com.mashibing.demo.listener.ScheduleTaskByInterface，这是可以动态修改定时时间的定时器，还不能用，还没调好

10、过滤器 -> 通过集成Filter实现. 缺点如下
   1.1 无法获取请求要访问的类与方法,以及参数. 可以获取原始的http请求与相应
   拦截器 -> 基于springmvc提供的拦截器接口,自定义实现.缺点如下
   2.1 可以获取请求访问的类与方法 , 但是无法获取请求参数的值. 具体可根据dispatcherServlet跟踪源码
   切面 -> 基于spring , 通过aspect注解实现
   3.1 可以获取访问的类 方法 以及参数值. 但是无法获取http原始的请求与相应的对象
   执行顺序
   .1 请求处理顺序
   5.1.1 过滤器 -> 拦截器 -> 切面
   5.2 报错处理顺序
   5.2.1 切面 -> controllerAdvice -> 拦截器 -> 过滤器 -> 服务

11、springboot 整合 logback ，logback-spring.xml配置详情
    contextName
        每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用contextName标签设置成其他名字，用于区分不同应用程序的记录
    property
        用来定义变量值的标签，property标签有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过property定义的值会被插入到logger上下文中。定义变量后，可以使“${name}”来使用变量。如上面的xml所示。
    logger
        用来设置某一个包或者具体的某一个类的日志打印级别以及指定appender。
    root
        根logger，也是一种logger，且只有一个level属性
    appender
        负责写日志的组件
            appender的种类
            ConsoleAppender：把日志添加到控制台
            FileAppender：把日志添加到文件
            RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。它是FileAppender的子类
    filter
        filter其实是appender里面的子元素。它作为过滤器存在，执行一个过滤器会有返回DENY，NEUTRAL，ACCEPT三个枚举值中的一个。
        DENY：日志将立即被抛弃不再经过其他过滤器
        NEUTRAL：有序列表里的下个过滤器过接着处理日志
        ACCEPT：日志会被立即处理，不再经过剩余过滤器

12、 post：   相当于insert操作
     get：    相当于select操作
     delete：相当于delete操作
     put：    相当于update操作
     put和post的区别：
        POST主要作用在一个集合资源之上的（url），而PUT主要作用在一个具体资源之上的（url/xxx），
        通俗一下讲就是，如URL可以在客户端确定，那么可使用PUT，否则用POST