<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"

       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
">
    <bean id="accountService" class="clm.aop.aspect.AccountService"></bean>

    <bean id="logger" class="clm.aop.aspect.Logger"></bean>

    <!--
        spring中基于xml的aop配置
        1、bean交给spring管理
        2、使用aop:config标签表明开始aop的位置
        3、使用aop:aspect标签表明配置切面
                id:切面唯一标识
                ref：指定通知类bean的id
        4、在aop:aspect标签内，使用对应标签来配置通知的类型
            让printlog在切入点方法执行前执行，所以是前置通知
             aop:before  前置通知
                method：指定Logger类中哪个方法是前置通知

        切入点表达式的写法：
            关键字：execution（表达式）
            表达式：访问修饰符  返回值  包名.包名.包名...类名.方法名（参数列表）
            标准写法：public void clm.aop.aspect.AccountService.add()
            访问修饰符可以省略：void clm.aop.aspect.AccountService.add()
            返回值可以使用通配符，表示返回任意值：* clm.aop.aspect.AccountService.add()
            包名可以使用通配符，表示任意包。有几级包，就需要几个*.:* *.*.*.AccountService.add()
            包名可以使用..表示当前包及其子包* *..AccountService.add()
            类名和方法名可以使用*通配：* *..*.*(),只能执行没有参数的方法
            参数列表：可以直接写数据类型：
                        基本类型直接写名称：  int
                        引用类型写包名.类名的方式   java.lang.String
                        使用通配符表示任意类型，但是必须有参数
                        可以使用..表示有无参数均可：* *..*.*(..)

            实际开发中只要对service层下的方法设置切入,比如所有实现类impl包下的：* clm.aop.aspect.impl.*.*(..)


            全通配写法：* *..*.*(..)
    -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="pt1" expression="execution(* clm.aop.aspect.AccountService.*(..))"/>

        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知类型，并建立通知方法和切入点方法的关联-->
<!--        <aop:before method="pringLog" pointcut="execution(public void clm.aop.aspect.AccountService.add())"></aop:before>-->
            <!--前置通知-->
<!--            <aop:before method="beforePringLog" pointcut-ref="pt1"></aop:before>-->
<!--            &lt;!&ndash;后置通知&ndash;&gt;-->
<!--            <aop:after-returning method="AfterPringLog" pointcut-ref="pt1"></aop:after-returning>-->
<!--            &lt;!&ndash;异常通知&ndash;&gt;-->
<!--            <aop:after-throwing method="ThrowPringLog" pointcut-ref="pt1"></aop:after-throwing>-->
<!--            &lt;!&ndash;最终通知&ndash;&gt;-->
<!--            <aop:after method="FinalPringLog" pointcut-ref="pt1"></aop:after>-->

            <!-- 可以写在aop:aspect中，也可以写在外面。但是：一定要写在aspect之前-->
<!--        <aop:pointcut id="pt1" expression="execution(* clm.aop.aspect.AccountService.*(..))"/>-->

            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>



</beans>